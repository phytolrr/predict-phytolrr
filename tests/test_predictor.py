import unittest
import numpy.testing
import logging
import phytolrr_predictor


class TestLrrSearch(unittest.TestCase):
    def setUp(self):
        logging.basicConfig(level=logging.INFO)

    def test_default_predict_AL1G15610_1(self):
        test_seq = 'METFRFLYLALFALCLIVSVLAQDQSGFISIDCGIPSGSSYKDDTTGINYVSDSSFVETGISKSIPFTSQRQLQNLRSFPEGSRNCYTLIPVQGKGRKYLIRASFMYGNYDGENDSPEFDLFLGGNIWDTVLLSNESSIVSKEVVYLSQSENIFVCLGNKGKGTPFISTLELRFLGNDNTTYDSPNGTLFFSRRWDFGSLMDSPVRYDEDVYDRIWIPRNFGYCREINTSLPVTSDNNSYSLSSLVMSTAMTPTNTTRPITMTLEDSDPNVRYFVYMHLAEVEDLSLKPNQTREFDIGINGVTVAAGFSPKYLQTNTFFLNPESQSKIVFSLVRTPKSTLPPIVNALEIYIANRVSQSLTNQEDGDAVTSLKTIYKVKKNWQGDPCLPNDYIWEGLNCSYDSLTPPRITSLNLSSSGLTGHISPSFSNLTMIQELDLSNNGLTGDIPEFLSKLKFLRVLNLEKNKLTGSVPSELLERSNSGSFLLRVGENPGLCIEISCRKSNSKK'
        ms = phytolrr_predictor.predict(test_seq)

        ms.sort(key=lambda m:m.offset)
        self.assertEqual(len(ms), 3)
        self.assertEqual([m.offset for m in ms], [407, 431, 455])
        numpy.testing.assert_array_almost_equal([m.score for m in ms],
                                                [27.3503114204658, 39.1562104586186, 36.2951803140635])

    def test_default_predict_evm_27_model_AmTr_v1_0_scaffold00002_363(self):
        test_seq = 'MGILFFLFALTLTLSSLSSSVFGLTQDGEALLEMKRGLNDTKGLLSNWKDTDINPCNWTRISCHLHDQRVRVINLPFLRLGGTISPSIGKITRLHRLAIHENSLHGTIPAEIGNCTELRALYLRANYLEGGIPTELGRLSNLIILDLSSNSLRGSIPPSIGHLGRLRFLNLSTNFLSGEIPKTGVLGSFGNFSFIGNLDLCGPQVQRLCKGSLGFPAVLPGHVNDDEAVPPRRATS'
        ms = phytolrr_predictor.predict(test_seq)

        ms.sort(key=lambda m:m.offset)
        self.assertEqual(len(ms), 6)
        self.assertEqual([m.offset for m in ms], [6, 69, 93, 117, 141, 165])
        numpy.testing.assert_array_almost_equal([m.score for m in ms],
                                                [10.7748224913081, 19.331539280432, 25.5300148879452, 29.7083175881698, 40.8018286797862, 40.0297399657356])

    def test_default_predict_AT1G05700_1(self):
        test_seq = 'MEEFRFLYLIYSAAFALCLVVSVLAQDQSGFISIDCGIPSGSSYKDDTTGINYVSDSSFVETGVSKSIPFTAQRQLQNLRSFPEGSRNCYTLIPIQGKGKKYLIRASFMYGNYDGENGSPEFDLFLGGNIWDTVLLSNGSSIVSKEVVYLSQSENIFVCLGNKGKGTPFISTLELRFLGNDNTTYDSPNGALFFSRRWDLRSLMGSPVRYDDDVYDRIWIPRNFGYCREINTSLPVTSDNNSYSLSSLVMSTAMTPINTTRPITMTLENSDPNVRYFVYMHFAEVEDLSLKPNQTREFDISINGVTVAAGFSPKYLQTNTFFLNPESQSKIAFSLVRTPKSTLPPIVNALEIYVANSFSQSLTNQEDGDAVTSLKTSYKVKKNWHGDPCLPNDYIWEGLNCSYDSLTPPRITSLNLSSSGLTGHISSSFSNLTMIQELDLSNNGLTGDIPEFLSKLKFLRVLNLENNTLTGSVPSELLERSNTGSFSLRLGENPGLCTEISCRKSNSKK'
        ms = phytolrr_predictor.predict(test_seq)

        ms.sort(key=lambda m:m.offset)
        self.assertEqual(len(ms), 3)
        self.assertEqual([m.offset for m in ms], [410, 434, 458])
        numpy.testing.assert_array_almost_equal([m.score for m in ms],
                                                [27.3503114204658, 39.1562104586186, 36.3811748663529])

    def test_default_predict_Bradi1g00260_2_p(self):
        test_seq = 'MEMITMTLAVFVSCFHLPLLWSFLLQYLNFFSHSTYWKLSLVSCPVVLLSWHKLNSESLHGFARGRKYYHLSDMPSQWPGYWMVMLVLVVIMALSFISIHGQPDSHGFISIDCGYTASKQYVDSRTGLTYASDDGFIDAGLVHTVDSANLQPDLAVRYFNLRYFPSGPRNCYTFRSLTAGGKYLVRAAFGYGDYDKLNRLPTFDLYFGVNYWTTVTIVSSSTAYLFESIAVSPADFLQICLVNTGSGTPFISALDLRSLTANLYPEANVTQSMVLLSFFRDTVGFGPNRYHFGTNYQHIRFPDDPYDRIWQRYEDIASWTDLPNKSNGEIQNPPNDTYDAPSAVMRSASTPLNASAMDLSWSSDSSMSVGVNPTYILVLYFAELDASQDLRQFDVSVDNDLLLASAFSPKFLLATVLSGIVRGSGEHSISLTTTSNSVLDPLISAMEIFMVRPVNESATDSVDAWTMMTIQTKYSVKRNWVGDPCVPTSLAWDGLNCSYTPSSAPRITGLNMSSSGLVSEIDASFGQILLLQHLDLSHNSLSGSIPDFLGQLPALKFLDLSSNNLSGSIPCNLLEKSQNGLLALRVDNPNLHGDCAPRPVGSKNKI'
        ms = phytolrr_predictor.predict(test_seq)

        ms.sort(key=lambda m:m.offset)
        self.assertEqual(len(ms), 3)
        self.assertEqual([m.offset for m in ms], [506, 530, 554])
        numpy.testing.assert_array_almost_equal([m.score for m in ms],
                                                [14.0695893079814, 44.675678790101, 46.0801846076546])